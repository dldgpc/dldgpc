(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{391:function(a,t,s){"use strict";s.r(t);var r=s(21),i=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"网页优化方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网页优化方案"}},[a._v("#")]),a._v(" 网页优化方案")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("CSS放在页面最上部，javascript放在页面最下面")]),a._v(" "),s("p",[a._v("浏览器会在下载完成全部CSS之后才对整个页面进行渲染，因此最好的做法是将CSS放在页面最上面，让浏览器尽快下载CSS。如果将 CSS放在其他地方比如 BODY中，则浏览器有可能还未下载和解析到 CSS就已经开始渲染页面了，这就导致页面由无 CSS状态跳转到 CSS状态，用户体验比较糟糕，所以可以考虑将CSS放在HEAD中。")]),a._v(" "),s("p",[a._v("Javascript则相反，浏览器在加载javascript后立即执行，有可能会阻塞整个页面，造成页面显示缓慢，因此javascript最好放在页面< body>最下面。但如果页面解析时就需要用到javascript，这时放到底部就不合适了。")]),a._v(" "),s("p",[a._v("Lazy Load Javascript（只有在需要加载的时候加载，在一般情况下并不加载信息内容。）随着 Javascript框架的流行，越来越多的站点也使用起了框架。不过，一个框架往往包括了很多的功能实现，这些功能并不是每一个页面都需要的，如果下载了不需要的脚本则算得上是一种资源浪费 -既浪费了带宽又浪费了执行花费的时间。目前的做法大概有两种，一种是为那些流量特别大的页面专门定制一个专用的 mini版框架，另一种则是 Lazy Load。")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);